{"version":3,"sources":["DatePicker.js","Loading.js","_config.js","App.js","index.js"],"names":["DatePickerContainer","props","updateDate","useState","Date","date","setDate","className","onChange","value","clearIcon","autoFocus","Loading","key","l3Topo","require","getL3","topojson","addDays","days","result","getDate","geomFilter","filter","geometry","features","getFilter","dateFilter","dates","gte","lte","and","addPlanetLayer","map","url","addSource","type","tiles","minzoom","maxzoom","attribution","addLayer","id","source","layout","visibility","addL3Layer","data","paint","getPlanetTileUrl","queryFilter","a","auth","login","setKey","items","search","types","footprints","tileUrl","forEach","fp","mapboxgl","accessToken","App","mapContainer","useRef","setMap","promiseInProgress","usePromiseTracker","trackPromise","planetTileURL","getLayer","removeLayer","getSource","removeSource","useEffect","Map","container","current","style","center","zoom","on","remove","ref","DatePicker","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eed4ee58.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport DatePicker from \"react-date-picker\";\n\nconst DatePickerContainer = (props) => {\n  const { updateDate } = props;\n  const [date, setDate] = useState(new Date());\n\n  const changeDate = (date) => {\n    updateDate(date);\n    setDate(date);\n  };\n\n  return (\n    <div className=\"datePicker\">\n      <DatePicker\n        onChange={changeDate}\n        value={date}\n        clearIcon={null}\n        autoFocus={true}\n      />\n    </div>\n  );\n};\nexport default DatePickerContainer;\n","import React from \"react\";\n\nconst Loading = () => {\n  return <div className=\"loader\"></div>;\n};\nexport default Loading;\n","const email = \"becker6@stolaf.edu\";\nconst password = \"LxfYfvWEZt7L.ds\";\nconst key = \"2b4881ccd4f94f10a8a48c508f395305\";\nconst mbAccess =\n  \"pk.eyJ1Ijoic2hhbmU5OGMiLCJhIjoiY2ttbzNidDdzMjE0ODJ3bDhsNnJmNWYxayJ9.WLY89SSw0VDm3uH0C6WtaQ\";\n\nexport { email, password, key, mbAccess };\n","import mapboxgl from \"mapbox-gl/dist/mapbox-gl-dev\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { trackPromise, usePromiseTracker } from \"react-promise-tracker\";\n\nimport auth from \"@planet/client/api/auth\";\nimport filter from \"@planet/client/api/filter\";\nimport items from \"@planet/client/api/items\";\nimport * as topojson from \"topojson-client\";\n\nimport DatePickerContainer from \"./DatePicker\";\nimport Loading from \"./Loading\";\n\nimport { email, password, key, mbAccess } from \"./_config\";\n\nconst l3Topo = require(\"./data/L3PermRoute.json\");\nconst getL3 = () => topojson.feature(l3Topo, \"l3PermRtMerge\");\n\nconst addDays = (date, days) => {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\nconst geomFilter = filter.geometry(\"geometry\", getL3().features[0].geometry);\n\nconst getFilter = (date) => {\n  const dateFilter = filter.dates(\"acquired\", {\n    gte: date,\n    lte: addDays(date, 1),\n  });\n  return filter.and([dateFilter, geomFilter]);\n};\n\nconst addPlanetLayer = (map, url) => {\n  map.addSource(\"Planet\", {\n    type: \"raster\",\n    tiles: [url],\n    minzoom: 0,\n    maxzoom: 19,\n    attribution: \"Â© Planet Labs\",\n  });\n  map.addLayer(\n    {\n      id: \"Planet\",\n      type: \"raster\",\n      source: \"Planet\",\n      minzoom: 0,\n      maxzoom: 19,\n      layout: {\n        visibility: \"visible\",\n      },\n    },\n    \"l3\"\n  );\n};\n\nconst addL3Layer = (map, data) => {\n  map.addSource(\"l3\", {\n    type: \"geojson\",\n    data: data.features[0],\n  });\n  map.addLayer({\n    id: \"l3\",\n    type: \"line\",\n    source: \"l3\",\n    layout: {\n      \"line-join\": \"round\",\n      \"line-cap\": \"round\",\n    },\n    paint: {\n      \"line-color\": \"red\",\n      \"line-width\": 2,\n    },\n  });\n};\n\nconst getPlanetTileUrl = async (queryFilter) => {\n  await auth.login(email, password);\n  await auth.setKey(key);\n  const footprints = await items.search({\n    types: [\"PSScene4Band\"],\n    filter: queryFilter,\n  });\n  let tileUrl = \"https://tiles.planet.com/data/v1/PSScene4Band/\";\n  footprints.forEach((fp) => (tileUrl += fp.id + \",\"));\n  tileUrl += \"/{z}/{x}/{y}.png?api_key=\";\n  tileUrl += key;\n  return tileUrl;\n};\n\nmapboxgl.accessToken = mbAccess;\n\nconst App = () => {\n  const mapContainer = useRef();\n  const [map, setMap] = useState(null);\n\n  const { promiseInProgress } = usePromiseTracker();\n\n  const updateDate = async (date) => {\n    const planetTileURL = await trackPromise(getPlanetTileUrl(getFilter(date)));\n    if (map.getLayer(\"Planet\")) map.removeLayer(\"Planet\");\n    if (map.getSource(\"Planet\")) map.removeSource(\"Planet\");\n    addPlanetLayer(map, planetTileURL);\n  };\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/shane98c/ckg018j041tc119p6tgqsg9mm\",\n      center: [-94.68, 46.72],\n      zoom: 6,\n    });\n    map.on(\"load\", async () => {\n      addL3Layer(map, getL3());\n      const planetTileURL = await trackPromise(\n        getPlanetTileUrl(getFilter(addDays(new Date(), -1)))\n      );\n      addPlanetLayer(map, planetTileURL);\n    });\n    setMap(map);\n    return () => map.remove();\n  }, [setMap]);\n\n  return (\n    <div>\n      <div className=\"map-container\" ref={mapContainer}></div>\n      <DatePickerContainer updateDate={updateDate} />\n      {promiseInProgress ? <Loading></Loading> : null}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}